// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  birthDate     DateTime
  phone         String?
  address       String?
  detailAddress String?
  verified      Boolean   @default(false)
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  cart          Cart?
  wishlist      Wishlist?
}

model Product {
  id            String           @id @default(cuid())
  name          String
  description   String
  price         Int
  category      Category
  subCategory   String
  gender        Gender
  variants      ProductVariant[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
}

model ProductVariant {
  id        String         @id @default(cuid())
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  size      Size           @relation(fields: [sizeId], references: [id])
  sizeId    String
  color     Color          @relation(fields: [colorId], references: [id])
  colorId   String
  stock     Int            @default(0)
  images    VariantImage[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([productId, sizeId, colorId])
  @@index([productId])
  @@index([sizeId])
  @@index([colorId])
}

model VariantImage {
  id             String         @id @default(cuid())
  url            String
  order          Int
  type           ImageType
  productVariant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId      String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([variantId])
}

model Size {
  id        String           @id @default(cuid())
  name      String           @unique
  products  ProductVariant[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Color {
  id        String           @id @default(cuid())
  name      String
  code      String
  products  ProductVariant[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Order {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  totalAmount     Int
  shippingAddress String
  paymentId       String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  size      String
  color     String
  price     Int
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  size      String
  color     String
}

model Wishlist {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String         @unique
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MEN
  WOMEN
  UNISEX
}

enum Category {
  OUTER
  TOP
  BOTTOM
  ACCESSORIES
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPING
  DELIVERED
  CANCELLED
}

enum ImageType {
  OUTFIT // 아웃핏 대표 이미지
  PRODUCT // 제품 대표 이미지
  ADDITIONAL // 추가 이미지
}
